using Autodesk.Revit.Attributes;
using Autodesk.Revit.DB;
using Autodesk.Revit.UI;
using Autodesk.Revit.ApplicationServices;
using Autodesk.Revit.DB.Architecture;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

[Transaction(TransactionMode.Manual)]
public class ExtractWallArea : IExternalCommand
{
    public Result Execute(ExternalCommandData commandData, ref string message, ElementSet elements)
    {
        UIApplication uiApp = commandData.Application;
        UIDocument uidoc = uiApp.ActiveUIDocument;
        Document doc = uidoc.Document;

        string csvPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + @"\RoomWallAreas.csv";

        var roomCollector = new FilteredElementCollector(doc)
            .OfCategory(BuiltInCategory.OST_Rooms)
            .WhereElementIsNotElementType();

        // Get the Revit projec title
        string projectTitle = doc.Title;
        string prjLocation = doc.PathName.TrimEnd('\\');

        List<string> csvLines = new List<string> {

                "Project Title: " + projectTitle,
                "Model Location: " + prjLocation,
                "Generated on: " + DateTime.Now.ToString("yyyy-MM-dd HH:mm"),
                "Generated by: " + Environment.UserName,
                "Generated from: " + Environment.MachineName,
                "",
            "Rm. No.,Room Name,View Name,Wall Id,Wall GUID,Wall Length (ft),Wall Area (sqft),Total area,Wall Orientation",
        };

        List<string> skippedWalls = new List<string>();

        using (Transaction tx = new Transaction(doc, "Split and Export Room Wall Data"))
        {
            tx.Start();

            foreach (Room room in roomCollector)
            {
                if (room.Location is LocationPoint locationPoint && room.Area > 0)
                {
                    SpatialElementBoundaryOptions options = new SpatialElementBoundaryOptions();
                    IList<IList<BoundarySegment>> boundaries = room.GetBoundarySegments(options);


                    //***************************
                    //***************************
                    string roomName = room.Name;
                    string roomNumber = room.Number;

                    if (roomName.EndsWith(" " + roomNumber))
                    {
                        roomName = roomName.Substring(0, roomName.Length - roomNumber.Length - 1);
                        room.Name = roomName; // Update the room name
                    }

                    double roomWallArea = 0.0;
                    // List to store individual wall info (Wall Id, Wall Area)
                    List<Tuple<string, double>> wallDetails = new List<Tuple<string, double>>();

                    // Retrieve the room boundary segments.
                    if (boundaries != null)
                    {
                        // Use a set to avoid processing duplicate walls.
                        HashSet<ElementId> processedWalls = new HashSet<ElementId>();
                        foreach (IList<BoundarySegment> boundaryList in boundaries)
                        {
                            foreach (BoundarySegment segment in boundaryList)
                            {
                                ElementId wallId = segment.ElementId;
                                if (wallId != ElementId.InvalidElementId && !processedWalls.Contains(wallId))
                                {
                                    processedWalls.Add(wallId);
                                    Element wallElement = doc.GetElement(wallId);
                                    Autodesk.Revit.DB.Wall wall = wallElement as Autodesk.Revit.DB.Wall;
                                    if (wall != null)
                                    {
                                        // Retrieve the computed wall area.
                                        Parameter areaParam = wall.get_Parameter(BuiltInParameter.HOST_AREA_COMPUTED);
                                        if (areaParam != null)
                                        {
                                            double area = areaParam.AsDouble();
                                            roomWallArea += area;
                                            wallDetails.Add(new Tuple<string, double>(wall.Id/*IntegerValue*/.ToString(), area));
                                        }
                                    }
                                }
                            }
                        }
                    }

                    //***************************
                    //***************************

                    if (boundaries == null) continue;

                    foreach (var boundaryList in boundaries)
                    {
                        foreach (BoundarySegment seg in boundaryList)
                        {
                            Element wallElem = doc.GetElement(seg.ElementId);
                            Wall wall = wallElem as Wall;

                            if (wall == null || !(wall.Location is LocationCurve locCurve))
                                continue;

                            // Disallow joins
                            WallUtils.DisallowWallJoinAtEnd(wall, 0);
                            WallUtils.DisallowWallJoinAtEnd(wall, 1);

                            Curve curve = locCurve.Curve;
                            if (curve == null || curve.Length < 0.1)
                            {
                                skippedWalls.Add($"Skipped wall ID {wall.Id} due to short/invalid curve.");
                                continue;
                            }




                            // View Name
                            string viewName = room.get_Parameter(BuiltInParameter.LEVEL_NAME)?.AsString();

                            // Orientation
                            XYZ direction = (curve.GetEndPoint(1) - curve.GetEndPoint(0)).Normalize();
                            string orientation = GetOrientation(direction);

                            // Area
                            double height = wall.get_Parameter(BuiltInParameter.WALL_USER_HEIGHT_PARAM)?.AsDouble() ?? 10.0;
                            double area = UnitUtils.Convert(curve.Length * height, UnitTypeId.SquareFeet, UnitTypeId.SquareFeet);

                            // GUID
                            string guid = wall.get_Parameter (BuiltInParameter.IFC_TYPE_GUID)?.ToString();

                            csvLines.Add($"{room.Number},{room.Name},{viewName},{wall.Id},{guid},{curve.Length:F2},{area:F2},{roomWallArea},{orientation},");
                        }
                    }
                }
            }

            tx.Commit();
        }

        File.WriteAllLines(csvPath, csvLines);

        if (skippedWalls.Any())
        {
            TaskDialog.Show("Skipped Walls", string.Join(Environment.NewLine, skippedWalls));
        }

        TaskDialog.Show("Export Complete", $"Room wall data exported to:\n{csvPath}");

        return Result.Succeeded;
    }

    private string GetOrientation(XYZ dir)
    {
        if (Math.Abs(dir.X) > Math.Abs(dir.Y))
            return dir.X > 0 ? "North Facing" : "South Facing";
        else
            return dir.Y > 0 ? "West Facing" : "East Facing";
    }
}
